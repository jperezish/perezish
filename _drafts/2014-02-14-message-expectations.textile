---
published: false
---

h1. Setting Expectations

I recently submitted the "Salesman Traveler":https://github.com/jperezish/Episode7 assignment for "Ruby Off Rails":https://rubyoffrails.com/. This assignemt starts with an already working app that finds the best route from a list of stops on a sales person's trip. It uses the "Ruby Geocoder gem":http://www.rubygeocoder.com/ to return the distance betweeen two stops. The goal of the app is to provide the shortest route given all of the stops.  

My main take away from this assignment involves refactoring the "SalesPerson class":https://github.com/jperezish/Episode7/blob/master/lib/sales_person.rb and yet another lesson in listening to your tests to help you sort out a better design. Well here's the initial design of the class create by "Jesse":https://twitter.com/jwo :

```ruby

  class SalesPerson
  
    attr_reader :cities
    def initialize
      @cities = []
    end
 	
    ...
  	
    def route
      CalculatesRoute.calculate(cities)
    end
  end

```

The initial collaborator `CalculatesRoute` had a single responsibility to calculate a route. It did this via the class method `.calculate`. But a couple new features were requested:

1. Provide the total miles for the route
2. Provide the total travel time for the route (at a speed of 55 mph)

Now these new messages seemed to change the role of the collaborator so I thought I'd simply just change the class name to a more appropriate `Route` and, since this route now had new methods that rely on an instance of a`Route` I updated it to respond to `#calculate`, `#miles_traveled`, and `#time_traveled` (although I now think I should've named the last two `#total_miles` and `#total_travel_time`). 

h2. be careful with any_instance

I made a mistake. I changed the class first, then I went to update the spec. Bad. So now I have the three methods I want and I assign the collaborator to the `@route` instance variable.

```ruby
  
  class SalesPerson
    attr_reader :cities
    def initialize
      @cities = []
      @route = Route.new
    end
  
	...
  
    def route
      @route.calculate(cities)
    end
  
    def miles_traveled
      @route.miles_traveled
    end
  
    def time_traveled
      @route.time_traveled
    end
  end	

```


and identifying the correct messages to send to the correct collaborators. 
The tests didn't feel right. I've heard this said a bunch of times that the tests will tell you. I now see as I'm writing more and more code what this means.

Yes this is just a little mistake but it's a good illustration of how not testing first can lead to a less than optimal design.